- Criar Projeto com  Next na versão 15.3.2

Configuração Inicial de Formatador Padrão com Prettier
-----------------------------------------------------------------------------------------------
yarn add prettier prettier-plugin-tailwindcss@0.6.11 -D
yarn add prettier@3.5.3 -D

 - Criar um .prettierrc.json e adicionar
  {
    "plugins":["prettier-plugins-tailwindcss"]
  }


Configurando Plugin de Padrão de Imports Eslint
------------------------------------------------------------------------------------------------
yarn add eslint-plugin-simple-import-sort@12.1.1 -D

 - Para utilizar cria um .vscode na raiz do projeto, arquivo settings.json com o seguinte conteudo:
{
  "eslint.workingDirectories": [
    {
      "mode": "auto",
    }
  ],
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  }
}

Configurando conexão com bando de dados
-----------------------------------------------------------------------------------------------
yarn add drizzle-orm@0.43.1 pg@8.15.6
yarn add drizzle-kit@0.31.1 -D

Configura Banco de Dados Neon PostgreeSql no Neon
  -Cria um arquivo .env na raiz

      DATABASE_URL="dados de conexão com o banco de dados"

  - Cria a pasta db em src e arquivo index.ts com os dados abaixo

      import 'dotenv/config';
      import { drizzle } from 'drizzle-orm/node-postgres';
      const db = drizzle(process.env.DATABASE_URL!);

  - Cria na raiz do Projeto drizzle.config.ts
      
      import 'dotenv/config';
      import { defineConfig } from 'drizzle-kit';
      export default defineConfig({
        out: './drizzle',
        schema: './src/db/schema.ts',
        dialect: 'postgresql',
        dbCredentials: {
          url: process.env.DATABASE_URL!,
        },
      });
  
  - Em db cria o arquivo schema.ts e começa a criar as tabelas
  - Apos rodar o comando para aplicar o schema ao banco de dados 
      npx drizzle-kit push

  - Para utilizar o utilitario de visualização do BD 
      npx drizzle-kit studio


Configurando conexão com bando de dados
-----------------------------------------------------------------------------------------------
Adicionar lib de componentes ShadcnUI
    npx shadcn@2.5.0 init
    npx shadcn@2.6.0 add form
    npx shadcn@2.6.0 add sonner
    npx shadcn@2.6.0 add dialog
    npx shadcn@2.6.0 add sidebar
    npx shadcn@2.6.0 add dropdown-menu
    npx shadcn@2.6.0 add select
    npx shadcn@2.6.0 add separator
    npx shadcn@2.6.0 add badge
    npx shadcn@2.6.0 add table
    npx shadcn@2.6.0 add dropdown-menu
    npx shadcn@2.6.0 add popover calendar

Adição de libs Esternas
-----------------------------------------------------------------------------------------------
  yarn add react-number-format@5.4.4
  yarn add next-safe-action@7.10.8
  yarn add dayjs
  yarn add @tanstack/react-table@8.21.3

  npm install -g npm-check-updates@18.0.1

Implementando Login com Lib BetterAuth
-----------------------------------------------------------------------------------------------
  yarn add better-auth
  npm install @better-auth/cli@1.2.8 @babel/core
  yarn add dotenv@16.5.0

  Criar as variaveis de ambiente em .env
    BETTER_AUTH_SECRET=
    BETTER_AUTH_URL=http://localhost:3000 #Base URL of your app
  
  Criar arquivo auth.ts em /lib
      
    import { betterAuth } from "better-auth";
    import { drizzleAdapter } from "better-auth/adapters/drizzle";

    import { db } from "../db"; // Adjust the import path as necessary
    
    export const auth = betterAuth({
      database: drizzleAdapter(db, {
        provider: "pg", // or "pg" or "mysql"
      }), 
      //... the rest of your config
    });

  Gerar Schema com BetterAuth
    npx @better-auth/cli@latest generate

  Copia o schema gerado para o esquema do seu banco, faz alterações necessarias e roda o push do drizzle
    npx drizzle-kit push

-Prompts

  Agendamentos 
  Crie uma pagina de agendamentos. Essa pagina deve ter um botão de "Novo Agendamento". Esse botão deve abrir um Dialog com um formuláriuo de criação de um agendamento. 

Esse fomulário terá os seguintes campos: 
- Select de pacientes: recupere os pacientes do banco de dados na página de agendamentos, que vai ser um server component
- Select de médicos: recupere os médicos do banco de dados na página de agendamentos, que vai ser um server component e passe-os como prop para o formulario 
- Valor da consulta: deve ser um input monetário formatado e só deve ser habilitado caso o medico ja tenha sido selecionado e o valor padrão dele deve ser o valor da consulta do médico selecionado(campo "appintmentPriceInCents" no banco de dados)
- Data: só estara habilitado ao ser selecionado paciente e medico e use o componente : <Popover>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          data-empty={!date}
          className="data-[empty=true]:text-muted-foreground w-[280px] justify-start text-left font-normal"
        >
          <CalendarIcon />
          {date ? format(date, "PPP") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <Calendar mode="single" selected={date} onSelect={setDate} />
      </PopoverContent>
    </Popover>
- Select de Horarios: só deixe habilitado se o paciente e medico tiver sido selecionado e deixe vazio por enquanto
Não faça a listagem de agendamentos por enquanto somente a criação
@general.mdc 





